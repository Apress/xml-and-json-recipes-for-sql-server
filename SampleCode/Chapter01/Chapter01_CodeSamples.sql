--USE AdventureWorks;

-- Listing 1-1. Simple SQL query. 
SELECT TOP (2) Category.Name AS CategoryName, 
	Subcategory.Name AS SubcategoryName,
	Product.Name, 
	Product.ProductNumber AS Number, 
	Product.ListPrice AS Price
FROM  Production.Product Product
	INNER JOIN Production.ProductSubcategory Subcategory 
		ON Product.ProductSubcategoryID = Subcategory.ProductSubcategoryID
	LEFT JOIN Production.ProductCategory Category
		ON Subcategory.ProductCategoryID = Category.ProductCategoryID
WHERE Product.ListPrice > 0 
	AND Product.SellEndDate IS NULL
ORDER BY CategoryName, SubcategoryName;

-- Listing 1-2. Showing element-centric XML.
/*
<Category>
  <Category xmlns="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema">
    <CategoryName>Accessories</CategoryName>
    <Subcategory>
      <SubcategoryName>Bike Racks</SubcategoryName>
      <Product>
        <Name>Hitch Rack - 4-Bike</Name>
        <Number>RA-H123</Number>
        <Price>120.0000</Price>
      </Product>
    </Subcategory>
    <Subcategory>
      <SubcategoryName>Bike Stands</SubcategoryName>
      <Product>
        <Name>All-Purpose Bike Stand</Name>
        <Number>ST-1401</Number>
        <Price>159.0000</Price>
      </Product>
    </Subcategory>
  </Category>
</Category>

*/

-- Listing 1-3. Showing attribute-centric XML.
/*
<Category CategoryName="Accessories">
  <Subcategory SubcategoryName="Bike Racks">
    <Product Name="Hitch Rack - 4-Bike" Number="RA-H123" Price="120.0000" />
  </Subcategory>
  <Subcategory SubcategoryName="Bike Stands">
    <Product Name="All-Purpose Bike Stand" Number="ST-1401" Price="159.0000" />
  </Subcategory>
</Category>
*/

-- Listing 1-5. Converting IMAGE data type into XML data type.
SELECT CAST(CAST(packagedata as VARBINARY(MAX)) AS XML) AS SSISPackage
FROM msdb.dbo.sysssispackages;

--Listing 1-6. Syntax for creating an untyped XML column.
CREATE TABLE dbo.UntypedXML
(
	UntypedXML_ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
	UntypedXMLData XML
);

-- Listing 1-7. Inserting a new row with XML data.

INSERT INTO dbo.UntypedXML
(
	UntypedXMLData
)
SELECT N'<Category>
  <Category xmlns="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema">
    <CategoryName>Accessories</CategoryName>
    <Subcategory>
      <SubcategoryName>Bike Racks</SubcategoryName>
      <Product>
        <Name>Hitch Rack - 4-Bike</Name>
        <Number>RA-H123</Number>
        <Price>120.0000</Price>
      </Product>
    </Subcategory>
    <Subcategory>
      <SubcategoryName>Bike Stands</SubcategoryName>
      <Product>
        <Name>All-Purpose Bike Stand</Name>
        <Number>ST-1401</Number>
        <Price>159.0000</Price>
      </Product>
    </Subcategory>
  </Category>
</Category>';

-- Listing 1-8. Inserting new row via XML variable.
DECLARE @xml XML = N'<char>
  <ToXML Entity="Entity ampersand &amp;; in XML data." />
  <ToXML Entity="Entity less-than sign &lt;; in XML data." />
  <ToXML Entity="Entity greater-than sign &gt;; in XML data." />
  <ToXML Entity="Entity apostrophe &apos;; in XML data." />
  <ToXML Entity="Entity quotation mark &quot;; in XML data." />
</char>';

INSERT INTO dbo.UntypedXML
(
	UntypedXMLData
)
SELECT @xml;
GO

-- Listing 1-9. Stored procedure to insert XML data into a table.
CREATE PROCEDURE dbo.usp_Insert_UntypedXML
	@UntypedXML XML
AS
INSERT INTO dbo.UntypedXML
(
	UntypedXMLData
)
SELECT @UntypedXML;
GO


-- Listing 1-10. Sample XML.
/*
<Category>
  <Category xmlns="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema">
    <CategoryName>Accessories</CategoryName>
    <Subcategory>
      <SubcategoryName>Bike Racks</SubcategoryName>
      <Product>
        <Name>Hitch Rack - 4-Bike</Name>
        <Number>RA-H123</Number>
        <Price>120.0000</Price>
      </Product>
    </Subcategory>
    <Subcategory>
      <SubcategoryName>Bike Stands</SubcategoryName>
      <Product>
        <Name>All-Purpose Bike Stand</Name>
        <Number>ST-1401</Number>
        <Price>159.0000</Price>
      </Product>
    </Subcategory>
  </Category>
</Category>
*/

--Listing 1-11. XML schema generated by Visual Studio.
/*
<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:tns="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Category">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="CategoryName" type="xs:string" />
        <xs:element maxOccurs="unbounded" name="Subcategory">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SubcategoryName" type="xs:string" />
              <xs:element name="Product">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Name" type="xs:string" />
                    <xs:element name="Number" type="xs:string" />
                    <xs:element name="Price" type="xs:decimal" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
*/

-- Listing 1-12. Creating XML schema query.
SELECT TOP (2) Category.Name AS CategoryName, 
	Subcategory.Name AS SubcategoryName,
	Product.Name, 
	Product.ProductNumber AS Number, 
	Product.ListPrice AS Price
FROM  Production.Product Product 
	INNER JOIN Production.ProductSubcategory Subcategory 
		ON Product.ProductSubcategoryID = Subcategory.ProductSubcategoryID
	LEFT JOIN Production.ProductCategory Category 
		ON Subcategory.ProductCategoryID = Category.ProductCategoryID
WHERE Product.ListPrice > 0 
	AND Product.SellEndDate IS NULL
ORDER BY CategoryName, SubcategoryName
FOR XML AUTO, ELEMENTS, XMLSCHEMA('http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema'), ROOT('Category');

-- Listing 1-13. Creating the XML Schema Collection.
CREATE XML SCHEMA COLLECTION dbo.TypedXML_VisualStudio 
AS 
N'<?xml version="1.0"?>
<xs:schema xmlns:tns="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://schemas.microsoft.com/sqlserver/2004/07/Chapter01/ProductSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Category">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="CategoryName" type="xs:string" />
        <xs:element maxOccurs="unbounded" name="Subcategory">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="SubcategoryName" type="xs:string" />
              <xs:element name="Product">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Name" type="xs:string" />
                    <xs:element name="Number" type="xs:string" />
                    <xs:element name="Price" type="xs:decimal" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>';
GO

-- Listing 1-14. Creating new table with typed XML column.
CREATE TABLE dbo.TypedXML_VS
(
	TypedXML_ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
	TypedXMLData XML(TypedXML_VisualStudio)
);
GO

-- Listing 1-15. Binding XML Schema Collection to the column.
ALTER TABLE TypedXML_VS 
ALTER COLUMN TypedXMLData XML (TypedXML_VisualStudio);

